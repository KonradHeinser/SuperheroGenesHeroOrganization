<?xml version="1.0" encoding="utf-8" ?>
<Defs>
    <IncidentDef ParentName="GiveQuestBase">
      <defName>SHGHero_OpportunitySite_Rescue</defName>
      <label>heroic rescue</label>
      <questScriptDef>SHGHero_OpportunitySite_Rescue</questScriptDef>
      <baseChance>0</baseChance> <!-- given by a special storyteller comp -->
    </IncidentDef>

    <QuestScriptDef>
        <defName>SHGHero_OpportunitySite_Rescue</defName>
        <rootSelectionWeight>0</rootSelectionWeight> <!--Created 1~3 times per year by the incident-->
        <rootMinPoints>350</rootMinPoints>
        <canGiveRoyalFavor>true</canGiveRoyalFavor>
        <expireDaysRange>2~4</expireDaysRange>
        <successHistoryEvent MayRequire="Ludeon.RimWorld.Ideology">Raided_BanditCamp</successHistoryEvent>
        <questNameRules>
          <rulesStrings>
            <li>questName->Villainous Foes</li>
          </rulesStrings>
        </questNameRules>
        <questDescriptionRules>
          <rulesStrings>
            <li>questDescription->[asker_nameFull], [faction_leaderTitle] of [faction_name], has sent us a message. [siteFaction_pawnsPlural] from [siteFaction_name] have ambushed [fluff], and [asker_label] believes one of the heroes was captured instead of killed. [sitePart0_description] that the [siteFaction_pawnsPlural] claimed after the raid.
            \n\n[asker_nameDef] knows there is a mole in [faction_name] who will warn the [siteFaction_pawnsPlural] as soon as a rescue operation is confirmed, meaning you will only have [siteDuration_duration] to stop them. This will likely be a difficult fight as [siteFaction_pawnsPlural] are far stronger than the average human and will be expecting you.
            \n\nIf you are able to free the captive they will join your colony. They will be a random super-powered being, which you can learn more about when you arrive on-site. If you kill all of the [siteFaction_pawnsPlural] but do not free the captive before leaving the map, they will return to [faction_name] after breaking free.
            \n\nThis will give [universalRoyalFavorReward] [faction_royalFavorLabel] to the accepter in addition to one of the rewards listed below.
            </li>
        <li>fluff(sameQuestsCount==0)->one of their hero squads</li>
        <li>fluff(sameQuestsCount>=1)->another team of heroes</li>
          </rulesStrings>
        </questDescriptionRules>
        <root Class="QuestNode_Sequence">
          <nodes>
            <!-- For description -->
            <li Class="QuestNode_GetSameQuestsCount">
                <storeAs>sameQuestsCount</storeAs>
            </li>
            
            <li Class="QuestNode_SubScript">
              <def>Util_RandomizePointsChallengeRating</def>
              <parms>
                <pointsFactorTwoStar>1.5</pointsFactorTwoStar>
                <pointsFactorThreeStar>2</pointsFactorThreeStar>
              </parms>
            </li>
            <!--Uses a distance curve that has higher point values than normal-->
            <li Class="QuestNode_EvaluateSimpleCurve">
              <value>$points</value>
              <storeAs>points</storeAs>
              <curve>
                <points>
                <li>   35,   35</li>
                <li>  400,  200</li>
                <li> 1000,  400</li>
                <li> 2000,  650</li>
                <li> 3000,  950</li>
                <li> 4000,  1300</li>
                <li> 5000,  1700</li>
                <li>10000, 2150</li>
                </points>
              </curve>
            </li>
            <li Class="QuestNode_GetMap" />
    
            <li Class="QuestNode_GetPawn">
                <storeAs>asker</storeAs>
                <mustBeFactionLeader>true</mustBeFactionLeader>
                <mustBeOfKind>SHG_HeroLeader</mustBeOfKind>
                <ifWorldPawnThenMustBeFreeOrLeader>true</ifWorldPawnThenMustBeFreeOrLeader>
                <mustBeWorldPawn>false</mustBeWorldPawn>
            </li>

            <li Class="QuestNode_GetFaction">
                <storeAs>faction</storeAs>
                <ofPawn>$asker</ofPawn>
                <allowEnemy>false</allowEnemy>
                <allowNeutral>true</allowNeutral>
                <allowAlly>true</allowAlly>
            </li>

            <li Class="QuestNode_RequireRoyalFavorFromFaction">
              <faction>$faction</faction>
            </li>

            <li Class="QuestNode_End">
                <inSignal>faction.BecameHostileToPlayer</inSignal>
                <outcome>InvalidPreAcceptance</outcome>
                <signalListenMode>NotYetAcceptedOnly</signalListenMode>
            </li>
    
            <li Class="QuestNode_GetSiteTile">
              <storeAs>siteTile</storeAs>
              <preferCloserTiles>true</preferCloserTiles>
            </li>
    
            <li Class="QuestNode_GetSitePartDefsByTagsAndFaction">
                <storeAs>sitePartDefs</storeAs>
                <storeFactionAs>siteFaction</storeFactionAs>
                <sitePartsTags>
                    <li><tag>BanditCamp</tag></li>
                    <li><tag>PrisonerWillingToJoin</tag></li>
                </sitePartsTags>
                <mustBeHostileToFactionOf>$asker</mustBeHostileToFactionOf>
            </li>

            <li Class="QuestNode_GetPawn">
                <storeAs>villainBoss</storeAs>
                <mustBeFactionLeader>true</mustBeFactionLeader>
                <mustBeOfKind>SHG_VillainBoss</mustBeOfKind>
                <ifWorldPawnThenMustBeFreeOrLeader>true</ifWorldPawnThenMustBeFreeOrLeader>
                <mustBeWorldPawn>false</mustBeWorldPawn>
            </li>

            <li Class="QuestNode_GetFaction">
                <storeAs>siteFaction</storeAs>
                <ofPawn>$villainBoss</ofPawn>
                <allowEnemy>true</allowEnemy>
                <allowNeutral>true</allowNeutral>
                <allowAlly>true</allowAlly>
            </li>
    
            <li Class="QuestNode_GetDefaultSitePartsParams">
              <tile>$siteTile</tile>
              <faction>$siteFaction</faction>
              <sitePartDefs>$sitePartDefs</sitePartDefs>
              <storeSitePartsParamsAs>sitePartsParams</storeSitePartsParamsAs>
            </li>
            
            <li Class="QuestNode_GetSiteThreatPoints">
              <storeAs>sitePoints</storeAs>
              <sitePartsParams>$sitePartsParams</sitePartsParams>
            </li>
            <li Class="QuestNode_SubScript">
              <def>Util_GetDefaultRewardValueFromPoints</def>
              <parms>
                <!-- Use the actual threat points generated (some site parts define a minimum threshold) -->
                <points>$sitePoints</points>
              </parms>
            </li>
    
            <!-- Inflate reward value some to counter the deflation on site points. -->
            <li Class="QuestNode_Multiply">
                <value1>$rewardValue</value1>
                <value2>1.50</value2>
                <storeAs>rewardValue</storeAs>
            </li>

            <!--Base royal favor given regardless of reward chosen-->
            <li Class="QuestNode_Multiply">
                <storeAs>universalRoyalFavorReward</storeAs>
                <value1>$points</value1>
                <value2>0.01</value2>
            </li>

            <li Class="SuperHeroGenesBase.QuestNode_Ceiling">
                <value>$universalRoyalFavorReward</value>
                <storeAs>universalRoyalFavorReward</storeAs>
            </li>
    
            <li Class="QuestNode_SubScript">
              <def>Util_GenerateSite</def>
            </li>
            
            <li Class="QuestNode_SpawnWorldObjects">
              <worldObjects>$site</worldObjects>
            </li>
    
            <li Class="QuestNode_Set">
                <name>siteDuration</name>
                <value>120000</value>
            </li>

            <li Class="QuestNode_WorldObjectTimeout">
              <worldObject>$site</worldObject>
              <isQuestTimeout>true</isQuestTimeout>
              <delayTicks>$siteDuration</delayTicks>
              <inSignalDisable>site.MapGenerated</inSignalDisable>
              <destroyOnCleanup>true</destroyOnCleanup>
              <node Class="QuestNode_Sequence">
                <nodes>
                  <li Class="QuestNode_Letter">
                    <label TKey="LetterLabelQuestExpired">Quest expired: [resolvedQuestName]</label>
                    <text TKey="LetterTextQuestExpired">The [siteFaction_pawnsPlural] have left the site. The quest [resolvedQuestName] has expired.</text>
                  </li>
                  <li Class="QuestNode_End">
                    <outcome>Fail</outcome>
                  </li>
                </nodes>
              </node>
            </li>
    
            <!-- If we enter and leave, the map is destroyed. Fail the quest. -->
            <li Class="QuestNode_Signal">
              <inSignal>site.Destroyed</inSignal>
              <node Class="QuestNode_Sequence">
                <nodes>
                  <li Class="QuestNode_Letter">
                    <label TKey="LetterLabelQuestFailed">Quest failed: [resolvedQuestName]</label>
                    <text TKey="LetterTextQuestFailed">After being discovered, the [siteFaction_pawnsPlural] decided to pack up early. The quest [resolvedQuestName] has ended.</text>
                  </li>
                  <li Class="QuestNode_End">
                    <outcome>Fail</outcome>
                  </li>
                </nodes>
              </node>
            </li>

            <li Class="QuestNode_Signal">
              <inSignal>site.AllEnemiesDefeated</inSignal>
              <node Class="QuestNode_Sequence">
                <nodes>
                  <li Class="QuestNode_Notify_PlayerRaidedSomeone">
                    <getRaidersFromMapParent>$site</getRaidersFromMapParent>
                  </li>
                  <li Class="QuestNode_GiveRewards">
                    <parms>
                      <allowGoodwill>true</allowGoodwill>
                      <allowRoyalFavor>true</allowRoyalFavor>
                      <chosenPawnSignal>ChosenPawnForReward</chosenPawnSignal>
                    </parms>
                    <addCampLootReward>true</addCampLootReward>
                    <customLetterLabel TKey="LetterLabelPaymentArrived">Payment arrived</customLetterLabel>
                    <customLetterText TKey="LetterTextPaymentArrived">You have defeated the [siteFaction_pawnsPlural]!\n\nThe payment from [faction_name] has arrived.</customLetterText>
                    <nodeIfChosenPawnSignalUsed Class="QuestNode_Letter">
                      <letterDef>ChoosePawn</letterDef>
                      <label TKey="LetterLabelFavorReceiver">[faction_royalFavorLabel]</label>
                      <text TKey="LetterTextFavorReceiver">These colonists participated in the victory for the quest [resolvedQuestName]. [asker_definite] wants to know who should receive the [royalFavorReward_amount] [faction_royalFavorLabel] for this service.</text>
                      <useColonistsOnMap>$site</useColonistsOnMap>
                      <chosenPawnSignal>ChosenPawnForReward</chosenPawnSignal>
                    </nodeIfChosenPawnSignalUsed>
                  </li>
                  <li Class="QuestNode_GiveRoyalFavorAndDevelopmentPoints">
                    <giveToAccepter>true</giveToAccepter>
                    <faction>$faction</faction>
                    <amount>$universalRoyalFavorReward</amount>
                  </li>
                </nodes>
              </node>
            </li>
            <li Class="QuestNode_End">
              <inSignal>site.AllEnemiesDefeated</inSignal>
              <outcome>Success</outcome>
            </li>
          </nodes>
        </root>
    </QuestScriptDef>
</Defs>
